/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChatCompletionFunctions
 */
export interface ChatCompletionFunctions {
    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     * @type {string}
     * @memberof ChatCompletionFunctions
     */
    'name': string;
    /**
     * The description of what the function does.
     * @type {string}
     * @memberof ChatCompletionFunctions
     */
    'description'?: string;
    /**
     * The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * @type {{ [key: string]: any; }}
     * @memberof ChatCompletionFunctions
     */
    'parameters'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ChatCompletionRequestMessage
 */
export interface ChatCompletionRequestMessage {
    /**
     * The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
     * @type {string}
     * @memberof ChatCompletionRequestMessage
     */
    'role': ChatCompletionRequestMessageRoleEnum;
    /**
     * The contents of the message. `content` is required for all messages except assistant messages with function calls.
     * @type {string}
     * @memberof ChatCompletionRequestMessage
     */
    'content'?: string;
    /**
     * The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     * @type {string}
     * @memberof ChatCompletionRequestMessage
     */
    'name'?: string;
    /**
     * 
     * @type {ChatCompletionRequestMessageFunctionCall}
     * @memberof ChatCompletionRequestMessage
     */
    'function_call'?: ChatCompletionRequestMessageFunctionCall;
}

export const ChatCompletionRequestMessageRoleEnum = {
    System: 'system',
    User: 'user',
    Assistant: 'assistant',
    Function: 'function'
} as const;

export type ChatCompletionRequestMessageRoleEnum = typeof ChatCompletionRequestMessageRoleEnum[keyof typeof ChatCompletionRequestMessageRoleEnum];

/**
 * The name and arguments of a function that should be called, as generated by the model.
 * @export
 * @interface ChatCompletionRequestMessageFunctionCall
 */
export interface ChatCompletionRequestMessageFunctionCall {
    /**
     * The name of the function to call.
     * @type {string}
     * @memberof ChatCompletionRequestMessageFunctionCall
     */
    'name'?: string;
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     * @type {string}
     * @memberof ChatCompletionRequestMessageFunctionCall
     */
    'arguments'?: string;
}
/**
 * 
 * @export
 * @interface ChatCompletionResponseMessage
 */
export interface ChatCompletionResponseMessage {
    /**
     * The role of the author of this message.
     * @type {string}
     * @memberof ChatCompletionResponseMessage
     */
    'role': ChatCompletionResponseMessageRoleEnum;
    /**
     * The contents of the message.
     * @type {string}
     * @memberof ChatCompletionResponseMessage
     */
    'content'?: string;
    /**
     * 
     * @type {ChatCompletionRequestMessageFunctionCall}
     * @memberof ChatCompletionResponseMessage
     */
    'function_call'?: ChatCompletionRequestMessageFunctionCall;
}

export const ChatCompletionResponseMessageRoleEnum = {
    System: 'system',
    User: 'user',
    Assistant: 'assistant',
    Function: 'function'
} as const;

export type ChatCompletionResponseMessageRoleEnum = typeof ChatCompletionResponseMessageRoleEnum[keyof typeof ChatCompletionResponseMessageRoleEnum];

/**
 * 
 * @export
 * @interface CreateAnswerRequest
 */
export interface CreateAnswerRequest {
    /**
     * ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     * @type {string}
     * @memberof CreateAnswerRequest
     */
    'model': string;
    /**
     * Question to get answered.
     * @type {string}
     * @memberof CreateAnswerRequest
     */
    'question': string;
    /**
     * List of (question, answer) pairs that will help steer the model towards the tone and answer format you\'d like. We recommend adding 2 to 3 examples.
     * @type {Array<any>}
     * @memberof CreateAnswerRequest
     */
    'examples': Array<any>;
    /**
     * A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
     * @type {string}
     * @memberof CreateAnswerRequest
     */
    'examples_context': string;
    /**
     * List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.  You should specify either `documents` or a `file`, but not both. 
     * @type {Array<string>}
     * @memberof CreateAnswerRequest
     */
    'documents'?: Array<string> | null;
    /**
     * The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either `documents` or a `file`, but not both. 
     * @type {string}
     * @memberof CreateAnswerRequest
     */
    'file'?: string | null;
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     * @type {string}
     * @memberof CreateAnswerRequest
     */
    'search_model'?: string | null;
    /**
     * The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     * @type {number}
     * @memberof CreateAnswerRequest
     */
    'max_rerank'?: number | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * @type {number}
     * @memberof CreateAnswerRequest
     */
    'temperature'?: number | null;
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs. 
     * @type {number}
     * @memberof CreateAnswerRequest
     */
    'logprobs'?: number | null;
    /**
     * The maximum number of tokens allowed for the generated answer
     * @type {number}
     * @memberof CreateAnswerRequest
     */
    'max_tokens'?: number | null;
    /**
     * 
     * @type {CreateAnswerRequestStop}
     * @memberof CreateAnswerRequest
     */
    'stop'?: CreateAnswerRequestStop | null;
    /**
     * How many answers to generate for each question.
     * @type {number}
     * @memberof CreateAnswerRequest
     */
    'n'?: number | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
     * @type {object}
     * @memberof CreateAnswerRequest
     */
    'logit_bias'?: object | null;
    /**
     * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.  This flag only takes effect when `file` is set. 
     * @type {boolean}
     * @memberof CreateAnswerRequest
     */
    'return_metadata'?: boolean | null;
    /**
     * If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     * @type {boolean}
     * @memberof CreateAnswerRequest
     */
    'return_prompt'?: boolean | null;
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     * @type {Array<any>}
     * @memberof CreateAnswerRequest
     */
    'expand'?: Array<any> | null;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateAnswerRequest
     */
    'user'?: string;
}
/**
 * @type CreateAnswerRequestStop
 * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. 
 * @export
 */
export type CreateAnswerRequestStop = Array<string> | string;

/**
 * 
 * @export
 * @interface CreateAnswerResponse
 */
export interface CreateAnswerResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateAnswerResponse
     */
    'object'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAnswerResponse
     */
    'model'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAnswerResponse
     */
    'search_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAnswerResponse
     */
    'completion'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateAnswerResponse
     */
    'answers'?: Array<string>;
    /**
     * 
     * @type {Array<CreateAnswerResponseSelectedDocumentsInner>}
     * @memberof CreateAnswerResponse
     */
    'selected_documents'?: Array<CreateAnswerResponseSelectedDocumentsInner>;
}
/**
 * 
 * @export
 * @interface CreateAnswerResponseSelectedDocumentsInner
 */
export interface CreateAnswerResponseSelectedDocumentsInner {
    /**
     * 
     * @type {number}
     * @memberof CreateAnswerResponseSelectedDocumentsInner
     */
    'document'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateAnswerResponseSelectedDocumentsInner
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface CreateChatCompletionRequest
 */
export interface CreateChatCompletionRequest {
    /**
     * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
     * @type {string}
     * @memberof CreateChatCompletionRequest
     */
    'model': string;
    /**
     * A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
     * @type {Array<ChatCompletionRequestMessage>}
     * @memberof CreateChatCompletionRequest
     */
    'messages': Array<ChatCompletionRequestMessage>;
    /**
     * A list of functions the model may generate JSON inputs for.
     * @type {Array<ChatCompletionFunctions>}
     * @memberof CreateChatCompletionRequest
     */
    'functions'?: Array<ChatCompletionFunctions>;
    /**
     * 
     * @type {CreateChatCompletionRequestFunctionCall}
     * @memberof CreateChatCompletionRequest
     */
    'function_call'?: CreateChatCompletionRequestFunctionCall;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    'temperature'?: number | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    'top_p'?: number | null;
    /**
     * How many chat completion choices to generate for each input message.
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    'n'?: number | null;
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
     * @type {boolean}
     * @memberof CreateChatCompletionRequest
     */
    'stream'?: boolean | null;
    /**
     * 
     * @type {CreateChatCompletionRequestStop}
     * @memberof CreateChatCompletionRequest
     */
    'stop'?: CreateChatCompletionRequestStop;
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    'max_tokens'?: number;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    'presence_penalty'?: number | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) 
     * @type {number}
     * @memberof CreateChatCompletionRequest
     */
    'frequency_penalty'?: number | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
     * @type {object}
     * @memberof CreateChatCompletionRequest
     */
    'logit_bias'?: object | null;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateChatCompletionRequest
     */
    'user'?: string;
}
/**
 * @type CreateChatCompletionRequestFunctionCall
 * Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.
 * @export
 */
export type CreateChatCompletionRequestFunctionCall = CreateChatCompletionRequestFunctionCallOneOf | string;

/**
 * 
 * @export
 * @interface CreateChatCompletionRequestFunctionCallOneOf
 */
export interface CreateChatCompletionRequestFunctionCallOneOf {
    /**
     * The name of the function to call.
     * @type {string}
     * @memberof CreateChatCompletionRequestFunctionCallOneOf
     */
    'name': string;
}
/**
 * @type CreateChatCompletionRequestStop
 * Up to 4 sequences where the API will stop generating further tokens. 
 * @export
 */
export type CreateChatCompletionRequestStop = Array<string> | string;

/**
 * 
 * @export
 * @interface CreateChatCompletionResponse
 */
export interface CreateChatCompletionResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    'object': string;
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionResponse
     */
    'created': number;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    'model': string;
    /**
     * 
     * @type {Array<CreateChatCompletionResponseChoicesInner>}
     * @memberof CreateChatCompletionResponse
     */
    'choices': Array<CreateChatCompletionResponseChoicesInner>;
    /**
     * 
     * @type {CreateCompletionResponseUsage}
     * @memberof CreateChatCompletionResponse
     */
    'usage'?: CreateCompletionResponseUsage;
}
/**
 * 
 * @export
 * @interface CreateChatCompletionResponseChoicesInner
 */
export interface CreateChatCompletionResponseChoicesInner {
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionResponseChoicesInner
     */
    'index'?: number;
    /**
     * 
     * @type {ChatCompletionResponseMessage}
     * @memberof CreateChatCompletionResponseChoicesInner
     */
    'message'?: ChatCompletionResponseMessage;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponseChoicesInner
     */
    'finish_reason'?: string;
}
/**
 * 
 * @export
 * @interface CreateClassificationRequest
 */
export interface CreateClassificationRequest {
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     * @type {string}
     * @memberof CreateClassificationRequest
     */
    'model': string;
    /**
     * Query to be classified.
     * @type {string}
     * @memberof CreateClassificationRequest
     */
    'query': string;
    /**
     * A list of examples with labels, in the following format:  `[[\"The movie is so interesting.\", \"Positive\"], [\"It is quite boring.\", \"Negative\"], ...]`  All the label strings will be normalized to be capitalized.  You should specify either `examples` or `file`, but not both. 
     * @type {Array<any>}
     * @memberof CreateClassificationRequest
     */
    'examples'?: Array<any> | null;
    /**
     * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either `examples` or `file`, but not both. 
     * @type {string}
     * @memberof CreateClassificationRequest
     */
    'file'?: string | null;
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     * @type {Array<string>}
     * @memberof CreateClassificationRequest
     */
    'labels'?: Array<string> | null;
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     * @type {string}
     * @memberof CreateClassificationRequest
     */
    'search_model'?: string | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * @type {number}
     * @memberof CreateClassificationRequest
     */
    'temperature'?: number | null;
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs. 
     * @type {number}
     * @memberof CreateClassificationRequest
     */
    'logprobs'?: number | null;
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     * @type {number}
     * @memberof CreateClassificationRequest
     */
    'max_examples'?: number | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
     * @type {object}
     * @memberof CreateClassificationRequest
     */
    'logit_bias'?: object | null;
    /**
     * If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     * @type {boolean}
     * @memberof CreateClassificationRequest
     */
    'return_prompt'?: boolean | null;
    /**
     * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.  This flag only takes effect when `file` is set. 
     * @type {boolean}
     * @memberof CreateClassificationRequest
     */
    'return_metadata'?: boolean | null;
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     * @type {Array<any>}
     * @memberof CreateClassificationRequest
     */
    'expand'?: Array<any> | null;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
     * @type {string}
     * @memberof CreateClassificationRequest
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface CreateClassificationResponse
 */
export interface CreateClassificationResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponse
     */
    'object'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponse
     */
    'model'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponse
     */
    'search_model'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponse
     */
    'completion'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponse
     */
    'label'?: string;
    /**
     * 
     * @type {Array<CreateClassificationResponseSelectedExamplesInner>}
     * @memberof CreateClassificationResponse
     */
    'selected_examples'?: Array<CreateClassificationResponseSelectedExamplesInner>;
}
/**
 * 
 * @export
 * @interface CreateClassificationResponseSelectedExamplesInner
 */
export interface CreateClassificationResponseSelectedExamplesInner {
    /**
     * 
     * @type {number}
     * @memberof CreateClassificationResponseSelectedExamplesInner
     */
    'document'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponseSelectedExamplesInner
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClassificationResponseSelectedExamplesInner
     */
    'label'?: string;
}
/**
 * 
 * @export
 * @interface CreateCompletionRequest
 */
export interface CreateCompletionRequest {
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     * @type {string}
     * @memberof CreateCompletionRequest
     */
    'model': string;
    /**
     * 
     * @type {CreateCompletionRequestPrompt}
     * @memberof CreateCompletionRequest
     */
    'prompt'?: CreateCompletionRequestPrompt | null;
    /**
     * The suffix that comes after a completion of inserted text.
     * @type {string}
     * @memberof CreateCompletionRequest
     */
    'suffix'?: string | null;
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model\'s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    'max_tokens'?: number | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    'temperature'?: number | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    'top_p'?: number | null;
    /**
     * How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    'n'?: number | null;
    /**
     * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb). 
     * @type {boolean}
     * @memberof CreateCompletionRequest
     */
    'stream'?: boolean | null;
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. 
     * @type {number}
     * @memberof CreateCompletionRequest
     */
    'logprobs'?: number | null;
    /**
     * Echo back the prompt in addition to the completion 
     * @type {boolean}
     * @memberof CreateCompletionRequest
     */
    'echo'?: boolean | null;
    /**
     * 
     * @type {CreateCompletionRequestStop}
     * @memberof CreateCompletionRequest
     */
    'stop'?: CreateCompletionRequestStop | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/p